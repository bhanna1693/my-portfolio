{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/icon-registry/icon-registry.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;;;;;;ACXqD;;;AAErD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,GAAG,EAAE,CAAC,4KAAsC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;QACvF,IAAI,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC;KACtB;CACF,CAAC;AAMK,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAHlB,CAAC,iEAAoB,CAAC,MAAM,CAAC,CAAC,EAC7B,yDAAY;mIAEX,gBAAgB,oFAFjB,yDAAY;;;;;;;;;;;;;;;;;;;;ACNjB,MAAM,YAAY;IAGvB;QAFA,UAAK,GAAG,cAAc,CAAC;IAGvB,CAAC;;wEAJU,YAAY;0GAAZ,YAAY;QCPzB,2EAA+B;;;;;;;;;;;;;;;;;;;;;;;;;ACAyB;AAGF;AACT;AACgC;AACD;AACI;AAC1B;;AAgB/C,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;2GAJb;QACT,EAAC,OAAO,EAAE,wFAA8B,EAAE,QAAQ,EAAE,EAAC,UAAU,EAAE,SAAS,EAAC,EAAC;QAC5E,GAAG,2FAAgB;KACpB,YATQ;YACP,oEAAa;YACb,iEAAgB;YAChB,yFAAuB;YACvB,kEAAgB;SACjB;mIAOU,SAAS,mBAbL,wDAAY,aAEzB,oEAAa;QACb,iEAAgB;QAChB,yFAAuB;QACvB,kEAAgB;;;;;;;;;;;;;;;;;;;;AChBsC;;;;AAQnD,MAAM,mBAAmB;IAM9B,YAAoB,eAAgC,EAChC,YAA0B;QAD1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAN9C,eAAU,GAAG,IAAI,GAAG,CAAiB;YACnC,CAAC,MAAM,EAAE,0BAA0B,CAAC;YACpC,CAAC,eAAe,EAAE,mCAAmC,CAAC;SACvD,CAAC,CAAC;IAIH,CAAC;IAED,SAAS;QACP,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAEO,2BAA2B;QACjC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;YAC7C,IAAI,CAAC,eAAe,CAAC,UAAU,CAC7B,QAAQ,EACR,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAC3D,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;;sFArBU,mBAAmB;oHAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;AA0Bb,MAAM,gBAAgB,GAAG;IAC9B,mBAAmB;IACnB;QACE,OAAO,EAAE,0DAAe;QACxB,UAAU,EAAE,CAAC,WAAgC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE;QAC/E,IAAI,EAAE,CAAC,mBAAmB,CAAC;QAC3B,KAAK,EAAE,IAAI;KACZ;CACF,CAAC;;;;;;;;;;;;;;;;ACxCF,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./container/container.module').then(m => m.ContainerModule),\n    data: {preload: true}\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'my-portfolio';\n\n  constructor() {\n  }\n}\n","<router-outlet></router-outlet>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\nimport {ICON_INITIALIZER} from './services/icon-registry/icon-registry.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n  ],\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}},\n    ...ICON_INITIALIZER\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {APP_INITIALIZER, Injectable} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MatIconRegistry} from '@angular/material/icon';\nimport {OnAppInit} from '../../models/on-app-init';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IconRegistryService implements OnAppInit {\n  customSvgs = new Map<string, string>([\n    ['hero', '../assets/icons/hero.svg'],\n    ['coding_laptop', '../assets/icons/coding-laptop.svg']\n  ]);\n\n  constructor(private matIconRegistry: MatIconRegistry,\n              private domSanitizer: DomSanitizer) {\n  }\n\n  onAppInit(): void {\n    this.addSvgIconToMatIconRegistry();\n  }\n\n  private addSvgIconToMatIconRegistry(): void {\n    this.customSvgs.forEach((iconPath, iconName) => {\n      this.matIconRegistry.addSvgIcon(\n        iconName,\n        this.domSanitizer.bypassSecurityTrustResourceUrl(iconPath)\n      );\n    });\n  }\n}\n\nexport const ICON_INITIALIZER = [\n  IconRegistryService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: (iconService: IconRegistryService) => () => iconService.onAppInit(),\n    deps: [IconRegistryService],\n    multi: true\n  }\n];\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}